"""
Module to control local settings and external code paths.

This allows us to do things like:
 - Set where the database and data is stored.
 - Specify local installation folders for psitools and IDL.
 - Isolate the command line environment for external calls.

This file/idea was copied from the fr_designer (RBSL) webapp.

Right now it has more stuff than needed, but they are kept for illustration.
"""
import contextlib
import os
import subprocess


class App:
    # Path to the the root directory of this package
    APP_HOME = __APP_HOME__

    # Path to the root directory for raw data.
    RAW_DATA_HOME = __RAW_DATA_HOME__

    # Path to the root directory for the processed data.
    PROCESSED_DATA_HOME = __PROCESSED_DATA_HOME__

    # Path to the folder where the databases are stored.
    DATABASE_HOME = __DATABASE_HOME__

    # Path to a directory for temporary files.
    TMP_HOME = __TMP_HOME__

    # Path to IDL installation directory.
    IDL_DIR = __IDL_DIR__
    # Path to SSWIDL installation directory.
    SSWIDL_DIR = __SSWIDL_DIR__

    # Path to Predictive Science External Dependencies installation directory.
    PS_EXT_DEPS_HOME = __PS_EXT_DEPS_HOME__

    # Path to Predictive Science Tools installation directory.
    PS_TOOLS_HOME = __PS_TOOLS_HOME__

    # List of paths to search for executables (includes default system folders).
    PATHS = [
        os.path.join(PS_TOOLS_HOME, 'gen_tools', 'bin'),
        os.path.join(PS_TOOLS_HOME, 'mas_tools', 'bin'),
        os.path.join(IDL_DIR, 'bin'),
        os.path.join(os.sep, 'usr', 'bin'),
        os.path.join(os.sep, 'bin'),
        os.path.join(os.sep, 'usr', 'sbin'),
        os.path.join(os.sep, 'sbin')
    ]

    # List of paths to search for dynamically linked libraries.
    LIBRARY_PATHS = [
        os.path.join(PS_EXT_DEPS_HOME, 'hdf5', 'lib'),
        os.path.join(PS_EXT_DEPS_HOME, 'zlib', 'lib')
    ]

    # List of paths to search for IDL scripts.
    IDL_PATHS = [
        os.path.join(PS_TOOLS_HOME, 'bin', 'idl'),
        os.path.join(SSWIDL_DIR, 'gen', 'idl', 'string')
    ]

    @staticmethod
    def set_env_vars():
        """
        This method sets up the command line variables for external tool calls.
        """
        os.putenv('IDL_DIR', App.IDL_DIR)

        os.putenv('PS_TOOLS_HOME', App.PS_TOOLS_HOME)

        path = ''
        for pathname in App.PATHS:
            path += os.pathsep + pathname
        os.putenv('PATH', path)

        path = ''
        for pathname in App.LIBRARY_PATHS:
            path += os.pathsep + pathname
        os.putenv('LD_LIBRARY_PATH', path)
        os.putenv('DYLD_LIBRARY_PATH', path)

        path = ''
        for pathname in App.IDL_PATHS:
            path += os.pathsep + pathname
        os.putenv('IDL_PATH', path)

    @staticmethod
    def remove_file(filename):
        with contextlib.suppress(FileNotFoundError):
            os.remove(filename)

    @staticmethod
    def remove_directory(dirname):
        try:
            os.rmdir(dirname)
        except OSError as e:
            raise

    @staticmethod
    def run_shell_command(command, dirname, debug=False):
        process = subprocess.Popen(
            command, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
            shell=True, cwd=dirname)

        try:
            stdout, stderr = process.communicate(timeout=300)
            if debug:
                for line in stdout.strip().decode().splitlines():
                    print(line)
                for line in stderr.strip().decode().splitlines():
                    print(line)
        except subprocess.TimeoutExpired:
            process.kill()

        return process.returncode
